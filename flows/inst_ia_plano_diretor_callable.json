{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "CohereEmbeddings",
            "id": "CohereEmbeddings-SxNwP",
            "name": "embeddings",
            "output_types": [
              "Embeddings"
            ]
          },
          "targetHandle": {
            "fieldName": "embedding",
            "id": "Chroma-E88DV",
            "inputTypes": [
              "Embeddings"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-CohereEmbeddings-SxNwP{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-SxNwPœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}-Chroma-E88DV{œfieldNameœ:œembeddingœ,œidœ:œChroma-E88DVœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CohereEmbeddings-SxNwP",
        "sourceHandle": "{œdataTypeœ:œCohereEmbeddingsœ,œidœ:œCohereEmbeddings-SxNwPœ,œnameœ:œembeddingsœ,œoutput_typesœ:[œEmbeddingsœ]}",
        "target": "Chroma-E88DV",
        "targetHandle": "{œfieldNameœ:œembeddingœ,œidœ:œChroma-E88DVœ,œinputTypesœ:[œEmbeddingsœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Chroma",
            "id": "Chroma-E88DV",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-1nByj",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-Chroma-E88DV{œdataTypeœ:œChromaœ,œidœ:œChroma-E88DVœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-1nByj{œfieldNameœ:œtoolsœ,œidœ:œAgent-1nByjœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "Chroma-E88DV",
        "sourceHandle": "{œdataTypeœ:œChromaœ,œidœ:œChroma-E88DVœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-1nByj",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-1nByjœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "DataFrameFilterToolComponent",
            "id": "DataFrameFilterToolComponent-5gRkm",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-1nByj",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "reactflow__edge-DataFrameFilterToolComponent-5gRkm{œdataTypeœ:œDataFrameFilterToolComponentœ,œidœ:œDataFrameFilterToolComponent-5gRkmœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-1nByj{œfieldNameœ:œtoolsœ,œidœ:œAgent-1nByjœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "DataFrameFilterToolComponent-5gRkm",
        "sourceHandle": "{œdataTypeœ:œDataFrameFilterToolComponentœ,œidœ:œDataFrameFilterToolComponent-5gRkmœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-1nByj",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-1nByjœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "File",
            "id": "File-2qR57",
            "name": "dataframe",
            "output_types": [
              "DataFrame"
            ]
          },
          "targetHandle": {
            "fieldName": "dataframe",
            "id": "DataFrameFilterToolComponent-5gRkm",
            "inputTypes": [
              "DataFrame"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__File-2qR57{œdataTypeœ:œFileœ,œidœ:œFile-2qR57œ,œnameœ:œdataframeœ,œoutput_typesœ:[œDataFrameœ]}-DataFrameFilterToolComponent-5gRkm{œfieldNameœ:œdataframeœ,œidœ:œDataFrameFilterToolComponent-5gRkmœ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "File-2qR57",
        "sourceHandle": "{œdataTypeœ:œFileœ,œidœ:œFile-2qR57œ,œnameœ:œdataframeœ,œoutput_typesœ:[œDataFrameœ]}",
        "target": "DataFrameFilterToolComponent-5gRkm",
        "targetHandle": "{œfieldNameœ:œdataframeœ,œidœ:œDataFrameFilterToolComponent-5gRkmœ,œinputTypesœ:[œDataFrameœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "FeasibilityStudyComponent",
            "id": "CustomComponent-K9kMB",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-1nByj",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CustomComponent-K9kMB{œdataTypeœ:œFeasibilityStudyComponentœ,œidœ:œCustomComponent-K9kMBœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-1nByj{œfieldNameœ:œtoolsœ,œidœ:œAgent-1nByjœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CustomComponent-K9kMB",
        "sourceHandle": "{œdataTypeœ:œFeasibilityStudyComponentœ,œidœ:œCustomComponent-K9kMBœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-1nByj",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-1nByjœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "FeasibilityReportComponent",
            "id": "CustomComponent-HGB2m",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-1nByj",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "id": "xy-edge__CustomComponent-HGB2m{œdataTypeœ:œFeasibilityReportComponentœ,œidœ:œCustomComponent-HGB2mœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-1nByj{œfieldNameœ:œtoolsœ,œidœ:œAgent-1nByjœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "selected": false,
        "source": "CustomComponent-HGB2m",
        "sourceHandle": "{œdataTypeœ:œFeasibilityReportComponentœ,œidœ:œCustomComponent-HGB2mœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "target": "Agent-1nByj",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-1nByjœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "TextInput",
            "id": "TextInput-MhsgS",
            "name": "text",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-1nByj",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__TextInput-MhsgS{œdataTypeœ:œTextInputœ,œidœ:œTextInput-MhsgSœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}-Agent-1nByj{œfieldNameœ:œinput_valueœ,œidœ:œAgent-1nByjœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "TextInput-MhsgS",
        "sourceHandle": "{œdataTypeœ:œTextInputœ,œidœ:œTextInput-MhsgSœ,œnameœ:œtextœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Agent-1nByj",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-1nByjœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-1nByj",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "TextOutput-nLucA",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "xy-edge__Agent-1nByj{œdataTypeœ:œAgentœ,œidœ:œAgent-1nByjœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-TextOutput-nLucA{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-nLucAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Agent-1nByj",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-1nByjœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "target": "TextOutput-nLucA",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œTextOutput-nLucAœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "Agent-1nByj",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "display_name": "Agent",
            "documentation": "https://docs.langflow.org/agents",
            "edited": false,
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "n_messages",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "add_current_date_tool"
            ],
            "frozen": false,
            "icon": "bot",
            "last_updated": "2025-08-11T02:40:29.674Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "group_outputs": false,
                "method": "message_response",
                "name": "response",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "add_current_date_tool": {
                "_input_type": "BoolInput",
                "advanced": false,
                "display_name": "Current Date",
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "add_current_date_tool",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "agent_description": {
                "_input_type": "MultilineInput",
                "advanced": true,
                "copy_field": false,
                "display_name": "Agent Description [Deprecated]",
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "agent_description",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "A helpful assistant with access to the following tools:"
              },
              "agent_llm": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Language Model",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "name": "agent_llm",
                "options": [
                  "Anthropic",
                  "Google Generative AI",
                  "Groq",
                  "OpenAI",
                  "Custom"
                ],
                "options_metadata": [
                  {
                    "icon": "Anthropic"
                  },
                  {
                    "icon": "GoogleGenerativeAI"
                  },
                  {
                    "icon": "Groq"
                  },
                  {
                    "icon": "OpenAI"
                  },
                  {
                    "icon": "brain"
                  }
                ],
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Google Generative AI"
              },
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Google API Key",
                "dynamic": false,
                "info": "The Google API Key to use for the Google Generative AI.",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS,\n    MODEL_PROVIDERS_DICT,\n    MODELS_METADATA,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers.current_date import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nMODEL_PROVIDERS_LIST = [\"Anthropic\", \"Google Generative AI\", \"Groq\", \"OpenAI\"]\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    documentation: str = \"https://docs.langflow.org/agents\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*MODEL_PROVIDERS_LIST, \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n            options_metadata=[MODELS_METADATA[key] for key in MODEL_PROVIDERS_LIST] + [{\"icon\": \"brain\"}],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Chat History Messages\",\n            value=100,\n            info=\"Number of chat history messages to retrieve.\",\n            advanced=True,\n            show=True,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        # removed memory inputs from agent component\n        # *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n            if isinstance(self.chat_history, Message):\n                self.chat_history = [self.chat_history]\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n            # note the tools are not required to run the agent, hence the validation removed.\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools or [],\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        # TODO: This is a temporary fix to avoid message duplication. We should develop a function for this.\n        messages = (\n            await MemoryComponent(**self.get_base_args())\n            .set(session_id=self.graph.session_id, order=\"Ascending\", n_messages=self.n_messages)\n            .retrieve_messages()\n        )\n        return [\n            message for message in messages if getattr(message, \"id\", None) != getattr(self.input_value, \"id\", None)\n        ]\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {}\n        for input_ in inputs:\n            if hasattr(self, f\"{prefix}{input_.name}\"):\n                model_kwargs[input_.name] = getattr(self, f\"{prefix}{input_.name}\")\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                    options_metadata=[MODELS_METADATA[key] for key in sorted(MODELS_METADATA.keys())]\n                    + [{\"icon\": \"brain\"}],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def _get_tools(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=\"Call_Agent\", tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n"
              },
              "handle_parsing_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Handle Parse Errors",
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "handle_parsing_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input",
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_iterations": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Iterations",
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "max_iterations",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 15
              },
              "max_output_tokens": {
                "_input_type": "IntInput",
                "advanced": false,
                "display_name": "Max Output Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "max_output_tokens",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 200000
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "input_types": [],
                "name": "model_name",
                "options": [
                  "gemma-3n-e4b-it",
                  "gemma-3-4b-it",
                  "gemma-3-1b-it",
                  "gemini-exp-1206",
                  "gemini-2.5-pro-preview-06-05",
                  "gemini-2.5-pro-preview-03-25",
                  "gemini-2.5-flash-preview-tts",
                  "gemini-2.5-flash-lite-preview-06-17",
                  "gemini-2.5-flash",
                  "gemini-2.0-pro-exp",
                  "gemini-2.0-flash-thinking-exp-01-21",
                  "gemini-2.0-flash-preview-image-generation",
                  "gemini-2.0-flash-lite-preview",
                  "gemini-2.0-flash-lite",
                  "gemini-2.0-flash-exp",
                  "gemini-2.0-flash",
                  "gemini-1.5-pro-002",
                  "gemini-1.5-flash-latest",
                  "gemini-1.5-flash-8b-001",
                  "gemini-1.5-flash-002"
                ],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": false,
                "refresh_button": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gemini-2.0-flash"
              },
              "n": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "N",
                "dynamic": false,
                "info": "Number of chat completions to generate for each prompt. Note that the API may not return the full n completions if duplicates are generated.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "n",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "n_messages": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Chat History Messages",
                "dynamic": false,
                "info": "Number of chat history messages to retrieve.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "n_messages",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 100
              },
              "system_prompt": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Agent Instructions",
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "system_prompt",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "<prompt>\n    <task>Gerar estudo de viabilidade urbanística completo para terrenos no município de São Paulo (SP)</task>\n    <details>\n        O agente deve:\n        - Interpretar os dados fornecidos na solicitação original como definitivos, sem solicitar informações adicionais;\n        - Utilizar ferramentas para buscar automaticamente zoneamento, índices urbanísticos e parâmetros de ocupação do solo no Plano Diretor, Lei de Zoneamento e legislações complementares;\n        - Realizar todos os cálculos necessários de potencial construtivo, coeficiente de aproveitamento e demais parâmetros aplicáveis;\n        - Retornar exclusivamente o relatório final do estudo de viabilidade, em formato claro, técnico e completo, sem solicitar interações adicionais.\n    </details>\n    <thinking>\n        Quais índices urbanísticos se aplicam ao terreno considerando seu zoneamento e localização?\n        Qual a melhor forma de apresentar cálculos e conclusões para garantir clareza e utilidade do relatório?\n        Quais parâmetros adicionais precisam ser inferidos a partir das ferramentas e bases de dados disponíveis?\n    </thinking>\n    <reflection>\n        Como a interpretação correta da legislação garante um resultado preciso e seguro?\n        O relatório final está completo, sem lacunas de informação, e pode ser usado diretamente para decisão de investimento?\n    </reflection>\n</prompt>\n"
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "Controls randomness. Lower values are more deterministic, higher values are more creative.",
                "input_types": [],
                "max_label": "",
                "max_label_icon": "",
                "min_label": "",
                "min_label_icon": "",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.49
              },
              "tool_model_enabled": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Tool Model Enabled",
                "dynamic": false,
                "info": "Whether to use the tool model.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "tool_model_enabled",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "tools": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Tools",
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "input_types": [
                  "Tool"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "tools",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "top_k": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Top K",
                "dynamic": false,
                "info": "Decode using top-k sampling: consider the set of top_k most probable tokens. Must be positive.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "top_k",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "top_p": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Top P",
                "dynamic": false,
                "info": "The maximum cumulative probability of tokens to consider when sampling.",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "top_p",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": ""
              },
              "verbose": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Verbose",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "list": false,
                "list_add_label": "Add More",
                "name": "verbose",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "Agent"
        },
        "dragging": false,
        "id": "Agent-1nByj",
        "measured": {
          "height": 803,
          "width": 320
        },
        "position": {
          "x": 597.5429648038079,
          "y": 1288.8656344137469
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "Chroma-E88DV",
          "node": {
            "base_classes": [
              "Data",
              "DataFrame"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Chroma Vector Store with search capabilities",
            "display_name": "Chroma DB",
            "documentation": "",
            "edited": true,
            "field_order": [
              "collection_name",
              "persist_directory",
              "ingest_data",
              "search_query",
              "should_cache_vector_store",
              "embedding",
              "chroma_server_cors_allow_origins",
              "chroma_server_host",
              "chroma_server_http_port",
              "chroma_server_grpc_port",
              "chroma_server_ssl_enabled",
              "allow_duplicates",
              "search_type",
              "number_of_results",
              "limit"
            ],
            "frozen": false,
            "icon": "Chroma",
            "last_updated": "2025-08-11T02:45:59.285Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "allow_duplicates": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Allow Duplicates",
                "dynamic": false,
                "info": "If false, will not add documents that are already in the Vector Store.",
                "list": false,
                "list_add_label": "Add More",
                "name": "allow_duplicates",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "chroma_server_cors_allow_origins": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Server CORS Allow Origins",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chroma_server_cors_allow_origins",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chroma_server_grpc_port": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Server gRPC Port",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "chroma_server_grpc_port",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "chroma_server_host": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Server Host",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chroma_server_host",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "chroma_server_http_port": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Server HTTP Port",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "chroma_server_http_port",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 0
              },
              "chroma_server_ssl_enabled": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Server SSL Enabled",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "chroma_server_ssl_enabled",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from copy import deepcopy\nfrom typing import TYPE_CHECKING\n\nfrom chromadb.config import Settings\nfrom langchain_chroma import Chroma\nfrom typing_extensions import override\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.base.vectorstores.utils import chroma_collection_to_data\nfrom langflow.inputs.inputs import BoolInput, DropdownInput, HandleInput, IntInput, StrInput\nfrom langflow.schema.data import Data\n\nif TYPE_CHECKING:\n    from langflow.schema.dataframe import DataFrame\n\n\nclass ChromaVectorStoreComponent(LCVectorStoreComponent):\n    \"\"\"Chroma Vector Store with search capabilities.\"\"\"\n\n    display_name: str = \"Chroma DB\"\n    description: str = \"Chroma Vector Store with search capabilities\"\n    name = \"Chroma\"\n    icon = \"Chroma\"\n\n    inputs = [\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            value=\"langflow\",\n        ),\n        StrInput(\n            name=\"persist_directory\",\n            display_name=\"Persist Directory\",\n        ),\n        *LCVectorStoreComponent.inputs,\n        HandleInput(name=\"embedding\", display_name=\"Embedding\", input_types=[\"Embeddings\"]),\n        StrInput(\n            name=\"chroma_server_cors_allow_origins\",\n            display_name=\"Server CORS Allow Origins\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"chroma_server_host\",\n            display_name=\"Server Host\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_http_port\",\n            display_name=\"Server HTTP Port\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"chroma_server_grpc_port\",\n            display_name=\"Server gRPC Port\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"chroma_server_ssl_enabled\",\n            display_name=\"Server SSL Enabled\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"allow_duplicates\",\n            display_name=\"Allow Duplicates\",\n            advanced=True,\n            info=\"If false, will not add documents that are already in the Vector Store.\",\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            options=[\"Similarity\", \"MMR\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=10,\n        ),\n        IntInput(\n            name=\"limit\",\n            display_name=\"Limit\",\n            advanced=True,\n            info=\"Limit the number of records to compare when Allow Duplicates is False.\",\n        ),\n    ]\n\n    @override\n    @check_cached_vector_store\n    def build_vector_store(self) -> Chroma:\n        \"\"\"Builds the Chroma object.\"\"\"\n        try:\n            from chromadb import Client\n            from langchain_chroma import Chroma\n        except ImportError as e:\n            msg = \"Could not import Chroma integration package. Please install it with `pip install langchain-chroma`.\"\n            raise ImportError(msg) from e\n        # Chroma settings\n        chroma_settings = None\n        client = None\n        if self.chroma_server_host:\n            chroma_settings = Settings(\n                chroma_server_cors_allow_origins=self.chroma_server_cors_allow_origins or [],\n                chroma_server_host=self.chroma_server_host,\n                chroma_server_http_port=self.chroma_server_http_port or None,\n                chroma_server_grpc_port=self.chroma_server_grpc_port or None,\n                chroma_server_ssl_enabled=self.chroma_server_ssl_enabled,\n            )\n            client = Client(settings=chroma_settings)\n\n        # Check persist_directory and expand it if it is a relative path\n        persist_directory = self.resolve_path(self.persist_directory) if self.persist_directory is not None else None\n        print(persist_directory)\n\n        chroma = Chroma(\n            persist_directory=persist_directory,\n            client=client,\n            embedding_function=self.embedding,\n            collection_name=self.collection_name,\n        )\n\n        self._add_documents_to_vector_store(chroma)\n        self.status = chroma_collection_to_data(chroma.get(limit=self.limit))\n        return chroma\n\n    def _add_documents_to_vector_store(self, vector_store: \"Chroma\") -> None:\n        \"\"\"Adds documents to the Vector Store.\"\"\"\n        ingest_data: list | Data | DataFrame = self.ingest_data\n        if not ingest_data:\n            self.status = \"\"\n            return\n\n        # Convert DataFrame to Data if needed using parent's method\n        ingest_data = self._prepare_ingest_data()\n\n        stored_documents_without_id = []\n        if self.allow_duplicates:\n            stored_data = []\n        else:\n            stored_data = chroma_collection_to_data(vector_store.get(limit=self.limit))\n            for value in deepcopy(stored_data):\n                del value.id\n                stored_documents_without_id.append(value)\n\n        documents = []\n        for _input in ingest_data or []:\n            if isinstance(_input, Data):\n                if _input not in stored_documents_without_id:\n                    documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.embedding is not None:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            vector_store.add_documents(documents)\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n"
              },
              "collection_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Collection Name",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "collection_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "pd_sp"
              },
              "embedding": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Embedding",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Embeddings"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "embedding",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "ingest_data": {
                "_input_type": "HandleInput",
                "advanced": false,
                "display_name": "Ingest Data",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Data",
                  "DataFrame"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "ingest_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "limit": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Limit",
                "dynamic": false,
                "info": "Limit the number of records to compare when Allow Duplicates is False.",
                "list": false,
                "list_add_label": "Add More",
                "name": "limit",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": ""
              },
              "number_of_results": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Number of Results",
                "dynamic": false,
                "info": "Number of results to return.",
                "list": false,
                "list_add_label": "Add More",
                "name": "number_of_results",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 10
              },
              "persist_directory": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Persist Directory",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "persist_directory",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "/app/langflow/chroma_db"
              },
              "search_query": {
                "_input_type": "QueryInput",
                "advanced": false,
                "display_name": "Search Query",
                "dynamic": false,
                "info": "Enter a query to run a similarity search.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "search_query",
                "placeholder": "Enter a query...",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "query",
                "value": ""
              },
              "search_type": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Search Type",
                "dynamic": false,
                "info": "",
                "name": "search_type",
                "options": [
                  "Similarity",
                  "MMR"
                ],
                "options_metadata": [],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Similarity"
              },
              "should_cache_vector_store": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Cache Vector Store",
                "dynamic": false,
                "info": "If True, the vector store will be cached for the current build of the component. This is useful for components that have multiple output methods and want to share the same vector store.",
                "list": false,
                "list_add_label": "Add More",
                "name": "should_cache_vector_store",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "search_query": {
                        "default": "",
                        "description": "Enter a query to run a similarity search.",
                        "title": "Search Query",
                        "type": "string"
                      }
                    },
                    "description": "Ferramenta destinada à recuperação de trechos do Plano Diretor de São Paulo com base em palavras-chave fornecidas. Utiliza um vectorstore para realizar buscas semânticas, retornando passagens relevantes de forma rápida e contextualizada.",
                    "display_description": "Chroma Vector Store with search capabilities",
                    "display_name": "search_documents",
                    "name": "search_documents",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "search_documents"
                    ]
                  },
                  {
                    "args": {
                      "search_query": {
                        "default": "",
                        "description": "Enter a query to run a similarity search.",
                        "title": "Search Query",
                        "type": "string"
                      }
                    },
                    "description": "Chroma Vector Store with search capabilities",
                    "display_description": "Chroma Vector Store with search capabilities",
                    "display_name": "as_dataframe",
                    "name": "as_dataframe",
                    "readonly": false,
                    "status": false,
                    "tags": [
                      "as_dataframe"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "selected_output": "search_results",
          "showNode": true,
          "type": "Chroma"
        },
        "dragging": false,
        "id": "Chroma-E88DV",
        "measured": {
          "height": 453,
          "width": 320
        },
        "position": {
          "x": -341.89167128931604,
          "y": 1138.707429399839
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CohereEmbeddings-SxNwP",
          "node": {
            "base_classes": [
              "Embeddings"
            ],
            "beta": false,
            "category": "cohere",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generate embeddings using Cohere models.",
            "display_name": "Cohere Embeddings",
            "documentation": "",
            "edited": false,
            "field_order": [
              "api_key",
              "model_name",
              "truncate",
              "max_retries",
              "user_agent",
              "request_timeout"
            ],
            "frozen": false,
            "icon": "Cohere",
            "key": "CohereEmbeddings",
            "last_updated": "2025-08-11T02:45:59.290Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {
              "keywords": [
                "model",
                "llm",
                "language model",
                "large language model"
              ]
            },
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Embeddings",
                "group_outputs": false,
                "method": "build_embeddings",
                "name": "embeddings",
                "options": null,
                "required_inputs": null,
                "selected": "Embeddings",
                "tool_mode": true,
                "types": [
                  "Embeddings"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 1.680506611692e-18,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Cohere API Key",
                "dynamic": false,
                "info": "",
                "input_types": [],
                "load_from_db": true,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from typing import Any\n\nimport cohere\nfrom langchain_cohere import CohereEmbeddings\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import DropdownInput, FloatInput, IntInput, MessageTextInput, Output, SecretStrInput\n\nHTTP_STATUS_OK = 200\n\n\nclass CohereEmbeddingsComponent(LCModelComponent):\n    display_name = \"Cohere Embeddings\"\n    description = \"Generate embeddings using Cohere models.\"\n    icon = \"Cohere\"\n    name = \"CohereEmbeddings\"\n\n    inputs = [\n        SecretStrInput(name=\"api_key\", display_name=\"Cohere API Key\", required=True, real_time_refresh=True),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model\",\n            advanced=False,\n            options=[\n                \"embed-english-v2.0\",\n                \"embed-multilingual-v2.0\",\n                \"embed-english-light-v2.0\",\n                \"embed-multilingual-light-v2.0\",\n            ],\n            value=\"embed-english-v2.0\",\n            refresh_button=True,\n            combobox=True,\n        ),\n        MessageTextInput(name=\"truncate\", display_name=\"Truncate\", advanced=True),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        MessageTextInput(name=\"user_agent\", display_name=\"User Agent\", advanced=True, value=\"langchain\"),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Embeddings\", name=\"embeddings\", method=\"build_embeddings\"),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        data = None\n        try:\n            data = CohereEmbeddings(\n                cohere_api_key=self.api_key,\n                model=self.model_name,\n                truncate=self.truncate,\n                max_retries=self.max_retries,\n                user_agent=self.user_agent,\n                request_timeout=self.request_timeout or None,\n            )\n        except Exception as e:\n            msg = (\n                \"Unable to create Cohere Embeddings. \",\n                \"Please verify the API key and model parameters, and try again.\",\n            )\n            raise ValueError(msg) from e\n        # added status if not the return data would be serialised to create the status\n        return data\n\n    def get_model(self):\n        try:\n            co = cohere.ClientV2(self.api_key)\n            response = co.models.list(endpoint=\"embed\")\n            models = response.models\n            return [model.name for model in models]\n        except Exception as e:\n            msg = f\"Failed to fetch Cohere models. Error: {e}\"\n            raise ValueError(msg) from e\n\n    async def update_build_config(self, build_config: dict, field_value: Any, field_name: str | None = None):\n        if field_name in {\"model_name\", \"api_key\"}:\n            if build_config.get(\"api_key\", {}).get(\"value\", None):\n                build_config[\"model_name\"][\"options\"] = self.get_model()\n        else:\n            build_config[\"model_name\"][\"options\"] = field_value\n        return build_config\n"
              },
              "max_retries": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Retries",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "max_retries",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 3
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "dialog_inputs": {},
                "display_name": "Model",
                "dynamic": false,
                "info": "",
                "name": "model_name",
                "options": [
                  "embed-english-light-v3.0",
                  "embed-multilingual-v2.0",
                  "embed-english-v3.0",
                  "embed-v4.0",
                  "embed-english-v2.0",
                  "embed-multilingual-light-v3.0",
                  "embed-multilingual-v3.0",
                  "embed-english-light-v2.0"
                ],
                "options_metadata": [],
                "placeholder": "",
                "refresh_button": true,
                "required": false,
                "show": true,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "embed-v4.0"
              },
              "request_timeout": {
                "_input_type": "FloatInput",
                "advanced": true,
                "display_name": "Request Timeout",
                "dynamic": false,
                "info": "",
                "list": false,
                "list_add_label": "Add More",
                "name": "request_timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "float",
                "value": ""
              },
              "truncate": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Truncate",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "truncate",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "user_agent": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "User Agent",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "user_agent",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "langchain"
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "CohereEmbeddings"
        },
        "dragging": false,
        "id": "CohereEmbeddings-SxNwP",
        "measured": {
          "height": 285,
          "width": 320
        },
        "position": {
          "x": -770.087530218136,
          "y": 1305.3210980409817
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "File-2qR57",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "data",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Loads content from one or more files.",
            "display_name": "File",
            "documentation": "https://docs.langflow.org/components-data#file",
            "edited": false,
            "field_order": [
              "path",
              "file_path",
              "separator",
              "silent_errors",
              "delete_server_file_after_processing",
              "ignore_unsupported_extensions",
              "ignore_unspecified_files",
              "use_multithreading",
              "concurrency_multithreading"
            ],
            "frozen": false,
            "icon": "file-text",
            "key": "File",
            "last_updated": "2025-08-11T02:45:59.294Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Structured Content",
                "group_outputs": false,
                "hidden": null,
                "method": "load_files_structured",
                "name": "dataframe",
                "options": null,
                "required_inputs": null,
                "selected": "DataFrame",
                "tool_mode": true,
                "types": [
                  "DataFrame"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Raw Content",
                "group_outputs": false,
                "hidden": null,
                "method": "load_files_message",
                "name": "message",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              },
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "File Path",
                "group_outputs": false,
                "hidden": null,
                "method": "load_files_path",
                "name": "path",
                "options": null,
                "required_inputs": null,
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 2.220446049250313e-16,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from copy import deepcopy\nfrom typing import Any\n\nfrom langflow.base.data.base_file import BaseFileComponent\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parallel_load_data, parse_text_file_to_data\nfrom langflow.io import BoolInput, FileInput, IntInput, Output\nfrom langflow.schema.data import Data\n\n\nclass FileComponent(BaseFileComponent):\n    \"\"\"Handles loading and processing of individual or zipped text files.\n\n    This component supports processing multiple valid files within a zip archive,\n    resolving paths, validating file types, and optionally using multithreading for processing.\n    \"\"\"\n\n    display_name = \"File\"\n    description = \"Loads content from one or more files.\"\n    documentation: str = \"https://docs.langflow.org/components-data#file\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    VALID_EXTENSIONS = TEXT_FILE_TYPES\n\n    _base_inputs = deepcopy(BaseFileComponent._base_inputs)\n\n    for input_item in _base_inputs:\n        if isinstance(input_item, FileInput) and input_item.name == \"path\":\n            input_item.real_time_refresh = True\n            break\n\n    inputs = [\n        *_base_inputs,\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"[Deprecated] Use Multithreading\",\n            advanced=True,\n            value=True,\n            info=\"Set 'Processing Concurrency' greater than 1 to enable multithreading.\",\n        ),\n        IntInput(\n            name=\"concurrency_multithreading\",\n            display_name=\"Processing Concurrency\",\n            advanced=True,\n            info=\"When multiple files are being processed, the number of files to process concurrently.\",\n            value=1,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Raw Content\", name=\"message\", method=\"load_files_message\"),\n    ]\n\n    def update_outputs(self, frontend_node: dict, field_name: str, field_value: Any) -> dict:\n        \"\"\"Dynamically show only the relevant output based on the number of files processed.\"\"\"\n        if field_name == \"path\":\n            # Add outputs based on the number of files in the path\n            if len(field_value) == 0:\n                return frontend_node\n\n            frontend_node[\"outputs\"] = []\n\n            if len(field_value) == 1:\n                # We need to check if the file is structured content\n                file_path = frontend_node[\"template\"][\"path\"][\"file_path\"][0]\n                if file_path.endswith((\".csv\", \".xlsx\", \".parquet\")):\n                    frontend_node[\"outputs\"].append(\n                        Output(display_name=\"Structured Content\", name=\"dataframe\", method=\"load_files_structured\"),\n                    )\n                elif file_path.endswith(\".json\"):\n                    frontend_node[\"outputs\"].append(\n                        Output(display_name=\"Structured Content\", name=\"json\", method=\"load_files_json\"),\n                    )\n\n                # All files get the raw content and path outputs\n                frontend_node[\"outputs\"].append(\n                    Output(display_name=\"Raw Content\", name=\"message\", method=\"load_files_message\"),\n                )\n                frontend_node[\"outputs\"].append(\n                    Output(display_name=\"File Path\", name=\"path\", method=\"load_files_path\"),\n                )\n            else:\n                # For multiple files, we only show the files output\n                frontend_node[\"outputs\"].append(\n                    Output(display_name=\"Files\", name=\"dataframe\", method=\"load_files\"),\n                )\n\n        return frontend_node\n\n    def process_files(self, file_list: list[BaseFileComponent.BaseFile]) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Processes files either sequentially or in parallel, depending on concurrency settings.\n\n        Args:\n            file_list (list[BaseFileComponent.BaseFile]): List of files to process.\n\n        Returns:\n            list[BaseFileComponent.BaseFile]: Updated list of files with merged data.\n        \"\"\"\n\n        def process_file(file_path: str, *, silent_errors: bool = False) -> Data | None:\n            \"\"\"Processes a single file and returns its Data object.\"\"\"\n            try:\n                return parse_text_file_to_data(file_path, silent_errors=silent_errors)\n            except FileNotFoundError as e:\n                msg = f\"File not found: {file_path}. Error: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n            except Exception as e:\n                msg = f\"Unexpected error processing {file_path}: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n\n        if not file_list:\n            msg = \"No files to process.\"\n            raise ValueError(msg)\n\n        concurrency = 1 if not self.use_multithreading else max(1, self.concurrency_multithreading)\n        file_count = len(file_list)\n\n        parallel_processing_threshold = 2\n        if concurrency < parallel_processing_threshold or file_count < parallel_processing_threshold:\n            if file_count > 1:\n                self.log(f\"Processing {file_count} files sequentially.\")\n            processed_data = [process_file(str(file.path), silent_errors=self.silent_errors) for file in file_list]\n        else:\n            self.log(f\"Starting parallel processing of {file_count} files with concurrency: {concurrency}.\")\n            file_paths = [str(file.path) for file in file_list]\n            processed_data = parallel_load_data(\n                file_paths,\n                silent_errors=self.silent_errors,\n                load_function=process_file,\n                max_concurrency=concurrency,\n            )\n\n        # Use rollup_basefile_data to merge processed data with BaseFile objects\n        return self.rollup_data(file_list, processed_data)\n"
              },
              "concurrency_multithreading": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Processing Concurrency",
                "dynamic": false,
                "info": "When multiple files are being processed, the number of files to process concurrently.",
                "list": false,
                "list_add_label": "Add More",
                "name": "concurrency_multithreading",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1
              },
              "delete_server_file_after_processing": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Delete Server File After Processing",
                "dynamic": false,
                "info": "If true, the Server File Path will be deleted after processing.",
                "list": false,
                "list_add_label": "Add More",
                "name": "delete_server_file_after_processing",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "file_path": {
                "_input_type": "HandleInput",
                "advanced": true,
                "display_name": "Server File Path",
                "dynamic": false,
                "info": "Data object with a 'file_path' property pointing to server file or a Message object with a path to the file. Supercedes 'Path' but supports same file types.",
                "input_types": [
                  "Data",
                  "Message"
                ],
                "list": true,
                "list_add_label": "Add More",
                "name": "file_path",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "ignore_unspecified_files": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Ignore Unspecified Files",
                "dynamic": false,
                "info": "If true, Data with no 'file_path' property will be ignored.",
                "list": false,
                "list_add_label": "Add More",
                "name": "ignore_unspecified_files",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "ignore_unsupported_extensions": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Ignore Unsupported Extensions",
                "dynamic": false,
                "info": "If true, files with unsupported extensions will not be processed.",
                "list": false,
                "list_add_label": "Add More",
                "name": "ignore_unsupported_extensions",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              },
              "path": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "zip",
                  "tar",
                  "tgz",
                  "bz2",
                  "gz"
                ],
                "file_path": [
                  "8c6dc54a-a57e-4fe9-8e87-a7a6788d47cf/spc_masterplan_indices_bronze.csv"
                ],
                "info": "Supported file extensions: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx; optionally bundled in file extensions: zip, tar, tgz, bz2, gz",
                "list": true,
                "list_add_label": "Add More",
                "name": "path",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "temp_file": false,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "separator": {
                "_input_type": "StrInput",
                "advanced": true,
                "display_name": "Separator",
                "dynamic": false,
                "info": "Specify the separator to use between multiple outputs in Message format.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "separator",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "silent_errors": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Silent Errors",
                "dynamic": false,
                "info": "If true, errors will not raise an exception.",
                "list": false,
                "list_add_label": "Add More",
                "name": "silent_errors",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": false
              },
              "use_multithreading": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "[Deprecated] Use Multithreading",
                "dynamic": false,
                "info": "Set 'Processing Concurrency' greater than 1 to enable multithreading.",
                "list": false,
                "list_add_label": "Add More",
                "name": "use_multithreading",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "selected_output": "dataframe",
          "showNode": true,
          "type": "File"
        },
        "dragging": false,
        "id": "File-2qR57",
        "measured": {
          "height": 217,
          "width": 320
        },
        "position": {
          "x": -769.4391176020481,
          "y": 1713.9608197313726
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "DataFrameFilterToolComponent-5gRkm",
          "node": {
            "base_classes": [
              "Text"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Filtra linhas de um DataFrame com base em uma coluna e valor e retorna como JSON string.",
            "display_name": "DataFrame Filter Tool",
            "documentation": "",
            "edited": true,
            "field_order": [
              "dataframe",
              "column_name",
              "filter_value"
            ],
            "frozen": false,
            "icon": "filter",
            "last_updated": "2025-08-11T02:45:59.298Z",
            "legacy": false,
            "lf_version": "1.5.0.post1",
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import pandas as pd\r\nimport json\r\n\r\nfrom langflow.custom.custom_component.component import Component\r\nfrom langflow.io import (\r\n    DataFrameInput,\r\n    MessageTextInput,\r\n    StrInput,\r\n    Output,\r\n)\r\nfrom langflow.schema.dataframe import DataFrame\r\nfrom langflow.logging import logger\r\n\r\n\r\nclass DataFrameFilterToolComponent(Component):\r\n    display_name = \"DataFrame Filter Tool\"\r\n    description = \"Filtra linhas de um DataFrame com base em uma coluna e valor e retorna como JSON string.\"\r\n    icon = \"filter\"\r\n\r\n    inputs = [\r\n        DataFrameInput(\r\n            name=\"dataframe\",\r\n            display_name=\"DataFrame\",\r\n            info=\"O DataFrame a ser filtrado.\",\r\n            required=True,\r\n        ),\r\n        StrInput(\r\n            name=\"column_name\",\r\n            display_name=\"Nome da Coluna\",\r\n            info=\"O nome da coluna usada para filtragem.\",\r\n            required=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"filter_value\",\r\n            display_name=\"Valor do Filtro\",\r\n            info=\"O valor que será usado para filtrar as linhas.\",\r\n            required=True,\r\n            tool_mode=True\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            display_name=\"JSON Result\",\r\n            name=\"json_output\",\r\n            method=\"filter_dataframe_to_json\",\r\n            info=\"As linhas filtradas como string JSON.\",\r\n        ),\r\n    ]\r\n\r\n    def filter_dataframe_to_json(self) -> str:\r\n        df: pd.DataFrame = self.dataframe\r\n        column = self.column_name\r\n        value = self.filter_value\r\n\r\n        if column not in df.columns:\r\n            self.status = f\"Coluna '{column}' não encontrada no DataFrame.\"\r\n            logger.warning(self.status)\r\n            return json.dumps({\"error\": self.status})\r\n\r\n        # Tenta converter o valor para o tipo da coluna, se possível\r\n        try:\r\n            value = df[column].dtype.type(value)\r\n        except Exception:\r\n            logger.info(f\"Não foi possível converter '{value}' para o tipo da coluna '{column}'.\")\r\n\r\n        filtered = df[df[column] == value]\r\n\r\n        if filtered.empty:\r\n            self.status = f\"Nenhuma linha encontrada com {column} == {value}.\"\r\n            return json.dumps({\"result\": []})\r\n\r\n        self.status = f\"{len(filtered)} linha(s) encontrada(s).\"\r\n\r\n        # Converte para JSON string\r\n        result_json = filtered.to_json(orient=\"records\", force_ascii=False)\r\n        return result_json\r\n"
              },
              "column_name": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "Nome da Coluna",
                "dynamic": false,
                "info": "O nome da coluna usada para filtragem.",
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "column_name",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "zona"
              },
              "dataframe": {
                "_input_type": "DataFrameInput",
                "advanced": false,
                "display_name": "DataFrame",
                "dynamic": false,
                "info": "O DataFrame a ser filtrado.",
                "input_types": [
                  "DataFrame"
                ],
                "list": false,
                "list_add_label": "Add More",
                "name": "dataframe",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "other",
                "value": ""
              },
              "filter_value": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Valor do Filtro",
                "dynamic": false,
                "info": "O valor que será usado para filtrar as linhas.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "filter_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "ZEU"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "filter_value": {
                        "description": "O valor que será usado para filtrar as linhas.",
                        "title": "Filter Value",
                        "type": "string"
                      }
                    },
                    "description": "Retorna informações sobre limites de ocupação relacionadas a uma zona específica do Plano Diretor de São Paulo",
                    "display_description": "Filtra linhas de um DataFrame com base em uma coluna e valor e retorna como JSON string.",
                    "display_name": "filter_dataframe_to_json",
                    "name": "filter_dataframe_to_json",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "filter_dataframe_to_json"
                    ]
                  }
                ]
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "DataFrameFilterToolComponent"
        },
        "dragging": false,
        "id": "DataFrameFilterToolComponent-5gRkm",
        "measured": {
          "height": 343,
          "width": 320
        },
        "position": {
          "x": -337.7703734016632,
          "y": 1660.8875389462514
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-K9kMB",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Calcula viabilidade com base em coeficientes urbanísticos, área de outorga e VGV.",
            "display_name": "Feasibility Study",
            "documentation": "",
            "edited": true,
            "field_order": [
              "lot_area",
              "indice_basico",
              "indice_maximo",
              "valor_outorga_m2",
              "valor_m2"
            ],
            "frozen": false,
            "icon": "calculator",
            "last_updated": "2025-08-11T02:45:59.303Z",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.custom.custom_component.component import Component\r\nfrom langflow.io import FloatInput, Output, MessageTextInput\r\nfrom langflow.schema import Data\r\n\r\n\r\nclass FeasibilityStudyComponent(Component):\r\n    display_name = \"Feasibility Study\"\r\n    description = \"Calcula viabilidade com base em coeficientes urbanísticos, área de outorga e VGV.\"\r\n    icon = \"calculator\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"lot_area\",\r\n            display_name=\"Área do Terreno (m²)\",\r\n            info=\"Área total do terreno em metros quadrados.\",\r\n            required=True,\r\n            tool_mode=True\r\n        ),\r\n        MessageTextInput(\r\n            name=\"indice_basico\",\r\n            display_name=\"Coeficiente Básico\",\r\n            info=\"Coeficiente de aproveitamento básico permitido pela legislação.\",\r\n            required=True,\r\n            tool_mode=True\r\n        ),\r\n        MessageTextInput(\r\n            name=\"indice_maximo\",\r\n            display_name=\"Coeficiente Máximo\",\r\n            info=\"Coeficiente máximo permitido com outorga onerosa.\",\r\n            required=True,\r\n            tool_mode=True\r\n        ),\r\n        MessageTextInput(\r\n            name=\"valor_outorga_m2\",\r\n            display_name=\"Valor m² Outorga (R$)\",\r\n            info=\"Valor do metro quadrado da outorga onerosa.\",\r\n            required=True,\r\n            tool_mode=True\r\n        ),\r\n        MessageTextInput(\r\n            name=\"valor_m2\",\r\n            display_name=\"Valor m² de Venda (R$)\",\r\n            info=\"Valor estimado do metro quadrado de venda (para VGV).\",\r\n            required=True,\r\n            tool_mode=True\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            display_name=\"Estudo de Viabilidade (Data)\",\r\n            name=\"viability_result\",\r\n            method=\"calculate_viability\",\r\n            info=\"Retorna os cálculos de viabilidade em formato Data.\",\r\n        )\r\n    ]\r\n\r\n    def calculate_viability(self) -> Data:\r\n        try:\r\n            area_terreno = float(self.lot_area)\r\n            indice_basico = float(self.indice_basico)\r\n            indice_maximo = float(self.indice_maximo)\r\n            valor_outorga_m2 = float(self.valor_outorga_m2)\r\n            valor_m2 = float(self.valor_m2)\r\n        except Exception as e:\r\n            self.status = f\"Erro de conversão: {e}\"\r\n            return Data(data={\"error\": self.status})\r\n\r\n        area_computavel = area_terreno * indice_basico\r\n        area_outorga = max(0, (indice_maximo - indice_basico) * area_terreno)\r\n        area_total = area_computavel + area_outorga\r\n        custo_outorga = area_outorga * valor_outorga_m2\r\n        vgv = area_computavel * valor_m2\r\n\r\n        resultado = {\r\n            \"area_computavel\": round(area_computavel, 2),\r\n            \"area_outorga\": round(area_outorga, 2),\r\n            \"area_total\": round(area_total, 2),\r\n            \"valor_m2\": round(valor_m2, 2),\r\n            \"valor_outorga_m2\": round(valor_outorga_m2, 2),\r\n            \"custo_outorga\": round(custo_outorga, 2),\r\n            \"vgv_estimado\": round(vgv, 2),\r\n        }\r\n\r\n        self.status = \"Cálculo de viabilidade concluído.\"\r\n        return Data(data=resultado)\r\n"
              },
              "indice_basico": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Coeficiente Básico",
                "dynamic": false,
                "info": "Coeficiente de aproveitamento básico permitido pela legislação.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "indice_basico",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "indice_maximo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Coeficiente Máximo",
                "dynamic": false,
                "info": "Coeficiente máximo permitido com outorga onerosa.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "indice_maximo",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "lot_area": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Área do Terreno (m²)",
                "dynamic": false,
                "info": "Área total do terreno em metros quadrados.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "lot_area",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "indice_basico": {
                        "description": "Coeficiente de aproveitamento básico permitido pela legislação.",
                        "title": "Indice Basico",
                        "type": "string"
                      },
                      "indice_maximo": {
                        "description": "Coeficiente máximo permitido com outorga onerosa.",
                        "title": "Indice Maximo",
                        "type": "string"
                      },
                      "lot_area": {
                        "description": "Área total do terreno em metros quadrados.",
                        "title": "Lot Area",
                        "type": "string"
                      },
                      "valor_m2": {
                        "description": "Valor estimado do metro quadrado de venda (para VGV).",
                        "title": "Valor M2",
                        "type": "string"
                      },
                      "valor_outorga_m2": {
                        "description": "Valor do metro quadrado da outorga onerosa.",
                        "title": "Valor Outorga M2",
                        "type": "string"
                      }
                    },
                    "description": "Calcula viabilidade com base em coeficientes urbanísticos, área de outorga e VGV.",
                    "display_description": "Calcula viabilidade com base em coeficientes urbanísticos, área de outorga e VGV.",
                    "display_name": "calculate_viability",
                    "name": "calculate_viability",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "calculate_viability"
                    ]
                  }
                ]
              },
              "valor_m2": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Valor m² de Venda (R$)",
                "dynamic": false,
                "info": "Valor estimado do metro quadrado de venda (para VGV).",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "valor_m2",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "valor_outorga_m2": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Valor m² Outorga (R$)",
                "dynamic": false,
                "info": "Valor do metro quadrado da outorga onerosa.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "valor_outorga_m2",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "FeasibilityStudyComponent"
        },
        "dragging": false,
        "id": "CustomComponent-K9kMB",
        "measured": {
          "height": 217,
          "width": 320
        },
        "position": {
          "x": -360.5315588977942,
          "y": 2091.981503314469
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "CustomComponent-HGB2m",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Gera um relatório HTML de estudo imobiliário com base nos parâmetros fornecidos.",
            "display_name": "Feasibility Report Generator",
            "documentation": "",
            "edited": true,
            "field_order": [
              "nome_estudo",
              "cidade",
              "estado",
              "endereco_terreno",
              "area_lote",
              "zona",
              "indice_basico",
              "indice_maximo",
              "valor_m2",
              "valor_outorga",
              "vgv",
              "caminho_pasta"
            ],
            "frozen": false,
            "icon": "file-text",
            "last_updated": "2025-08-11T02:45:59.307Z",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "area_lote": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Área do Lote (m²)",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "area_lote",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "1000"
              },
              "caminho_pasta": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Caminho da Pasta",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "caminho_pasta",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "/app/reports"
              },
              "cidade": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Cidade",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "cidade",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "São Paulo"
              },
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from pathlib import Path\r\n\r\nfrom langflow.custom.custom_component.component import Component\r\nfrom langflow.schema.message import Message\r\nfrom langflow.io import (\r\n    Output,\r\n    MessageTextInput\r\n)\r\n\r\nTEMPLATE = \"\"\"<!DOCTYPE html>\r\n<html lang=\"pt-BR\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>Relatório - {nome_estudo}</title>\r\n    <style>\r\n        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\r\n        \r\n        * {{\r\n            margin: 0;\r\n            padding: 0;\r\n            box-sizing: border-box;\r\n        }}\r\n        \r\n        body {{\r\n            font-family: 'Inter', sans-serif;\r\n            background: linear-gradient(135deg, #0f0c29 0%, #302b63 50%, #24243e 100%);\r\n            min-height: 100vh;\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            padding: 20px;\r\n        }}\r\n        \r\n        .container {{\r\n            width: 210mm;\r\n            min-height: 297mm;\r\n            background: #ffffff;\r\n            box-shadow: 0 25px 80px rgba(0,0,0,0.3);\r\n            border-radius: 16px;\r\n            overflow: hidden;\r\n            position: relative;\r\n        }}\r\n        \r\n        .container::before {{\r\n            content: '';\r\n            position: absolute;\r\n            top: 0;\r\n            left: 0;\r\n            right: 0;\r\n            bottom: 0;\r\n            background: \r\n                radial-gradient(circle at 15% 25%, rgba(79, 172, 254, 0.06) 0%, transparent 60%),\r\n                radial-gradient(circle at 85% 15%, rgba(120, 119, 198, 0.08) 0%, transparent 60%),\r\n                radial-gradient(circle at 50% 85%, rgba(255, 154, 158, 0.05) 0%, transparent 60%),\r\n                linear-gradient(135deg, rgba(79, 172, 254, 0.02), rgba(120, 119, 198, 0.02));\r\n            pointer-events: none;\r\n        }}\r\n        \r\n        .report-container {{\r\n            position: relative;\r\n            z-index: 1;\r\n            padding: 50px 60px;\r\n        }}\r\n        \r\n        .header {{\r\n            text-align: center;\r\n            margin-bottom: 50px;\r\n            position: relative;\r\n            padding-bottom: 30px;\r\n        }}\r\n        \r\n        .header::after {{\r\n            content: '';\r\n            position: absolute;\r\n            bottom: 0;\r\n            left: 50%;\r\n            transform: translateX(-50%);\r\n            width: 120px;\r\n            height: 4px;\r\n            background: linear-gradient(90deg, #4facfe, #00f2fe);\r\n            border-radius: 2px;\r\n        }}\r\n        \r\n        .main-title {{\r\n            font-size: 42px;\r\n            font-weight: 900;\r\n            color: #1a202c;\r\n            margin-bottom: 12px;\r\n            background: linear-gradient(135deg, #667eea, #764ba2);\r\n            -webkit-background-clip: text;\r\n            -webkit-text-fill-color: transparent;\r\n            background-clip: text;\r\n            letter-spacing: -1px;\r\n        }}\r\n        \r\n        .subtitle {{\r\n            font-size: 18px;\r\n            color: #718096;\r\n            font-weight: 500;\r\n            text-transform: uppercase;\r\n            letter-spacing: 2px;\r\n        }}\r\n        \r\n        .study-name {{\r\n            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\r\n            color: white;\r\n            padding: 25px 35px;\r\n            border-radius: 16px;\r\n            text-align: center;\r\n            margin-bottom: 40px;\r\n            box-shadow: 0 15px 35px rgba(79, 172, 254, 0.3);\r\n        }}\r\n        \r\n        .study-name h2 {{\r\n            font-size: 28px;\r\n            font-weight: 700;\r\n            margin-bottom: 8px;\r\n        }}\r\n        \r\n        .study-name p {{\r\n            font-size: 16px;\r\n            opacity: 0.9;\r\n            font-weight: 400;\r\n        }}\r\n        \r\n        .section {{\r\n            margin-bottom: 35px;\r\n            background: rgba(255, 255, 255, 0.7);\r\n            border-radius: 20px;\r\n            padding: 30px;\r\n            box-shadow: 0 8px 32px rgba(0,0,0,0.08);\r\n            backdrop-filter: blur(10px);\r\n            border: 1px solid rgba(255, 255, 255, 0.2);\r\n        }}\r\n        \r\n        .section-title {{\r\n            font-size: 22px;\r\n            font-weight: 700;\r\n            color: #2d3748;\r\n            margin-bottom: 25px;\r\n            display: flex;\r\n            align-items: center;\r\n            gap: 12px;\r\n            padding-bottom: 15px;\r\n            border-bottom: 2px solid #e2e8f0;\r\n        }}\r\n        \r\n        .section-title .icon {{\r\n            font-size: 24px;\r\n        }}\r\n        \r\n        .data-grid {{\r\n            display: grid;\r\n            grid-template-columns: 1fr 1fr;\r\n            gap: 25px;\r\n        }}\r\n        \r\n        .data-grid.single {{\r\n            grid-template-columns: 1fr;\r\n        }}\r\n        \r\n        .data-item {{\r\n            background: white;\r\n            padding: 20px;\r\n            border-radius: 12px;\r\n            box-shadow: 0 4px 16px rgba(0,0,0,0.05);\r\n            border-left: 4px solid #4facfe;\r\n            transition: all 0.3s ease;\r\n        }}\r\n        \r\n        .data-item:hover {{\r\n            transform: translateY(-2px);\r\n            box-shadow: 0 8px 25px rgba(0,0,0,0.1);\r\n        }}\r\n        \r\n        .data-item.full-width {{\r\n            grid-column: 1 / -1;\r\n        }}\r\n        \r\n        .data-label {{\r\n            font-size: 13px;\r\n            font-weight: 600;\r\n            color: #718096;\r\n            text-transform: uppercase;\r\n            letter-spacing: 0.8px;\r\n            margin-bottom: 8px;\r\n        }}\r\n        \r\n        .data-value {{\r\n            font-size: 18px;\r\n            font-weight: 700;\r\n            color: #2d3748;\r\n            line-height: 1.2;\r\n        }}\r\n        \r\n        .data-value.large {{\r\n            font-size: 22px;\r\n        }}\r\n        \r\n        .financial-section .data-item {{\r\n            border-left-color: #48bb78;\r\n        }}\r\n        \r\n        .financial-section .data-value {{\r\n            color: #38a169;\r\n        }}\r\n        \r\n        .vgv-highlight {{\r\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n            color: white;\r\n            padding: 40px;\r\n            border-radius: 20px;\r\n            text-align: center;\r\n            margin-top: 40px;\r\n            position: relative;\r\n            overflow: hidden;\r\n            box-shadow: 0 20px 60px rgba(102, 126, 234, 0.4);\r\n        }}\r\n        \r\n        .vgv-highlight::before {{\r\n            content: '';\r\n            position: absolute;\r\n            top: -50%;\r\n            left: -50%;\r\n            width: 200%;\r\n            height: 200%;\r\n            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);\r\n            animation: rotate 15s linear infinite;\r\n        }}\r\n        \r\n        @keyframes rotate {{\r\n            0% {{ transform: rotate(0deg); }}\r\n            100% {{ transform: rotate(360deg); }}\r\n        }}\r\n        \r\n        .vgv-content {{\r\n            position: relative;\r\n            z-index: 1;\r\n        }}\r\n        \r\n        .vgv-title {{\r\n            font-size: 20px;\r\n            font-weight: 600;\r\n            margin-bottom: 15px;\r\n            opacity: 0.9;\r\n            text-transform: uppercase;\r\n            letter-spacing: 1px;\r\n        }}\r\n        \r\n        .vgv-value {{\r\n            font-size: 48px;\r\n            font-weight: 900;\r\n            margin-bottom: 10px;\r\n            text-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n        }}\r\n        \r\n        .vgv-subtitle {{\r\n            font-size: 16px;\r\n            opacity: 0.8;\r\n            font-weight: 500;\r\n        }}\r\n        \r\n        .location-section {{\r\n            background: linear-gradient(135deg, rgba(72, 187, 120, 0.1), rgba(56, 161, 105, 0.05));\r\n        }}\r\n        \r\n        .zoning-section {{\r\n            background: linear-gradient(135deg, rgba(79, 172, 254, 0.1), rgba(0, 242, 254, 0.05));\r\n        }}\r\n        \r\n        .financial-section {{\r\n            background: linear-gradient(135deg, rgba(236, 201, 75, 0.1), rgba(245, 158, 11, 0.05));\r\n        }}\r\n        \r\n        @media print {{\r\n            body {{\r\n                background: white;\r\n                margin: 0;\r\n                padding: 0;\r\n            }}\r\n            \r\n            .container {{\r\n                width: 100%;\r\n                min-height: auto;\r\n                box-shadow: none;\r\n                border-radius: 0;\r\n                margin: 0;\r\n            }}\r\n            \r\n            .vgv-highlight::before {{\r\n                animation: none;\r\n            }}\r\n        }}\r\n        \r\n        /* Animações de entrada */\r\n        .section {{\r\n            animation: slideIn 0.8s ease-out;\r\n            animation-fill-mode: both;\r\n        }}\r\n        \r\n        .section:nth-child(1) {{ animation-delay: 0.1s; }}\r\n        .section:nth-child(2) {{ animation-delay: 0.2s; }}\r\n        .section:nth-child(3) {{ animation-delay: 0.3s; }}\r\n        .section:nth-child(4) {{ animation-delay: 0.4s; }}\r\n        .section:nth-child(5) {{ animation-delay: 0.5s; }}\r\n        \r\n        @keyframes slideIn {{\r\n            from {{\r\n                opacity: 0;\r\n                transform: translateX(-30px);\r\n            }}\r\n            to {{\r\n                opacity: 1;\r\n                transform: translateX(0);\r\n            }}\r\n        }}\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"report-container\">\r\n            <div class=\"header\">\r\n                <h1 class=\"main-title\">RELATÓRIO TÉCNICO</h1>\r\n                <p class=\"subtitle\">Estudo de Viabilidade Imobiliária</p>\r\n            </div>\r\n            \r\n            <div class=\"study-name\">\r\n                <h2>{nome_estudo}</h2>\r\n                <p>Análise Completa de Viabilidade</p>\r\n            </div>\r\n            \r\n            <div class=\"section location-section\">\r\n                <div class=\"section-title\">\r\n                    <span class=\"icon\">📍</span>\r\n                    <span>Localização do Empreendimento</span>\r\n                </div>\r\n                <div class=\"data-grid\">\r\n                    <div class=\"data-item\">\r\n                        <div class=\"data-label\">Cidade</div>\r\n                        <div class=\"data-value\">{cidade}</div>\r\n                    </div>\r\n                    <div class=\"data-item\">\r\n                        <div class=\"data-label\">Estado</div>\r\n                        <div class=\"data-value\">{estado}</div>\r\n                    </div>\r\n                    <div class=\"data-item full-width\">\r\n                        <div class=\"data-label\">Endereço do Terreno</div>\r\n                        <div class=\"data-value large\">{endereco_terreno}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- Seção Zoneamento -->\r\n            <div class=\"section zoning-section\">\r\n                <div class=\"section-title\">\r\n                    <span class=\"icon\">🏗️</span>\r\n                    <span>Parâmetros de Zoneamento</span>\r\n                </div>\r\n                <div class=\"data-grid\">\r\n                    <div class=\"data-item\">\r\n                        <div class=\"data-label\">Zona</div>\r\n                        <div class=\"data-value\">{zona}</div>\r\n                    </div>\r\n                    <div class=\"data-item\">\r\n                        <div class=\"data-label\">Área do Lote</div>\r\n                        <div class=\"data-value\">{area_lote}</div>\r\n                    </div>\r\n                    <div class=\"data-item\">\r\n                        <div class=\"data-label\">Índice Básico</div>\r\n                        <div class=\"data-value\">{indice_basico}</div>\r\n                    </div>\r\n                    <div class=\"data-item\">\r\n                        <div class=\"data-label\">Índice Máximo</div>\r\n                        <div class=\"data-value\">{indice_maximo}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <div class=\"section financial-section\">\r\n                <div class=\"section-title\">\r\n                    <span class=\"icon\">💰</span>\r\n                    <span>Informações Financeiras</span>\r\n                </div>\r\n                <div class=\"data-grid\">\r\n                    <div class=\"data-item\">\r\n                        <div class=\"data-label\">Valor do m²</div>\r\n                        <div class=\"data-value\">{valor_m2}</div>\r\n                    </div>\r\n                    <div class=\"data-item\">\r\n                        <div class=\"data-label\">Valor de Outorga</div>\r\n                        <div class=\"data-value\">{valor_outorga}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n            <!-- VGV em Destaque -->\r\n            <div class=\"vgv-highlight\">\r\n                <div class=\"vgv-content\">\r\n                    <div class=\"vgv-title\">🎯 VGV - Valor Geral de Vendas</div>\r\n                    <div class=\"vgv-value\">{vgv}</div>\r\n                    <div class=\"vgv-subtitle\">Potencial Total do Empreendimento</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</body>\r\n</html>\"\"\"\r\n\r\nclass FeasibilityReportComponent(Component):\r\n    display_name = \"Feasibility Report Generator\"\r\n    description = \"Gera um relatório HTML de estudo imobiliário com base nos parâmetros fornecidos.\"\r\n    icon = \"file-text\"\r\n\r\n    inputs = [\r\n        MessageTextInput(\r\n            name=\"nome_estudo\",\r\n            display_name=\"Nome do Estudo\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"cidade\",\r\n            display_name=\"Cidade\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"estado\",\r\n            display_name=\"Estado (UF)\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"endereco_terreno\",\r\n            display_name=\"Endereço do Terreno\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"area_lote\",\r\n            display_name=\"Área do Lote (m²)\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"zona\",\r\n            display_name=\"Zona\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"indice_basico\",\r\n            display_name=\"Índice Básico\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"indice_maximo\",\r\n            display_name=\"Índice Máximo\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"valor_m2\",\r\n            display_name=\"Valor do m² (R$)\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"valor_outorga\",\r\n            display_name=\"Valor da Outorga (R$)\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"vgv\",\r\n            display_name=\"VGV (R$)\",\r\n            required=True,\r\n            tool_mode=True,\r\n        ),\r\n        MessageTextInput(\r\n            name=\"caminho_pasta\",\r\n            display_name=\"Caminho da Pasta\",\r\n            required=True,\r\n        ),\r\n    ]\r\n\r\n    outputs = [\r\n        Output(\r\n            display_name=\"Caminho do Arquivo\",\r\n            name=\"relatorio_html\",\r\n            method=\"generate_report\",\r\n            info=\"Retorna o caminho do arquivo HTML gerado.\",\r\n        )\r\n    ]\r\n\r\n    def generate_report(self) -> Message:\r\n        \"\"\"\r\n        Gera um relatório HTML de estudo imobiliário.\r\n        \"\"\"\r\n        html_content = TEMPLATE.format(\r\n            nome_estudo=self.nome_estudo,\r\n            cidade=self.cidade,\r\n            estado=self.estado,\r\n            endereco_terreno=self.endereco_terreno,\r\n            area_lote=self.area_lote,\r\n            zona=self.zona,\r\n            indice_basico=self.indice_basico,\r\n            indice_maximo=self.indice_maximo,\r\n            valor_m2=self.valor_m2,\r\n            valor_outorga=self.valor_outorga,\r\n            vgv=self.vgv\r\n        )\r\n        \r\n        Path(self.caminho_pasta).mkdir(parents=True, exist_ok=True)\r\n        # Exemplo de placeholder de retorno:\r\n        caminho_arquivo = f\"{self.caminho_pasta}/relatorio_{self.nome_estudo}.html\"\r\n        \r\n        with open(caminho_arquivo, 'w', encoding='utf-8') as arquivo:\r\n            arquivo.write(html_content)\r\n        \r\n        self.status = \"Relatório gerado com sucesso (placeholder).\"\r\n        \r\n        return Message(text=caminho_arquivo)\r\n"
              },
              "endereco_terreno": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Endereço do Terreno",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "endereco_terreno",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Av. Osvaldo Aranha 790"
              },
              "estado": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Estado (UF)",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "estado",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "SP"
              },
              "indice_basico": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Índice Básico",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "indice_basico",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "1.0"
              },
              "indice_maximo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Índice Máximo",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "indice_maximo",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "2.0"
              },
              "nome_estudo": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Nome do Estudo",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "nome_estudo",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Teste"
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": [
                  {
                    "args": {
                      "area_lote": {
                        "description": "",
                        "title": "Area Lote",
                        "type": "string"
                      },
                      "cidade": {
                        "description": "",
                        "title": "Cidade",
                        "type": "string"
                      },
                      "endereco_terreno": {
                        "description": "",
                        "title": "Endereco Terreno",
                        "type": "string"
                      },
                      "estado": {
                        "description": "",
                        "title": "Estado",
                        "type": "string"
                      },
                      "indice_basico": {
                        "description": "",
                        "title": "Indice Basico",
                        "type": "string"
                      },
                      "indice_maximo": {
                        "description": "",
                        "title": "Indice Maximo",
                        "type": "string"
                      },
                      "nome_estudo": {
                        "description": "",
                        "title": "Nome Estudo",
                        "type": "string"
                      },
                      "valor_m2": {
                        "description": "",
                        "title": "Valor M2",
                        "type": "string"
                      },
                      "valor_outorga": {
                        "description": "",
                        "title": "Valor Outorga",
                        "type": "string"
                      },
                      "vgv": {
                        "description": "",
                        "title": "Vgv",
                        "type": "string"
                      },
                      "zona": {
                        "description": "",
                        "title": "Zona",
                        "type": "string"
                      }
                    },
                    "description": "Gera um relatório HTML de estudo imobiliário com base nos parâmetros fornecidos.",
                    "display_description": "Gera um relatório HTML de estudo imobiliário com base nos parâmetros fornecidos.",
                    "display_name": "generate_report",
                    "name": "generate_report",
                    "readonly": false,
                    "status": true,
                    "tags": [
                      "generate_report"
                    ]
                  }
                ]
              },
              "valor_m2": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Valor do m² (R$)",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "valor_m2",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "20.000 R$"
              },
              "valor_outorga": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Valor da Outorga (R$)",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "valor_outorga",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "1.000 R$"
              },
              "vgv": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "VGV (R$)",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "vgv",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "1.000.000 R$"
              },
              "zona": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Zona",
                "dynamic": false,
                "info": "",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "zona",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "ZEU"
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "FeasibilityReportComponent"
        },
        "dragging": false,
        "id": "CustomComponent-HGB2m",
        "measured": {
          "height": 299,
          "width": 320
        },
        "position": {
          "x": -356.49469474963325,
          "y": 2387.3296271180593
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextInput-MhsgS",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "input_output",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get user text inputs.",
            "display_name": "Text Input",
            "documentation": "https://docs.langflow.org/components-io#text-input",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "key": "TextInput",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.0022704986850629236,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get user text inputs.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-input\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Text to be passed as input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextInput"
        },
        "dragging": false,
        "id": "TextInput-MhsgS",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": -339.168569114597,
          "y": 876.73100175537
        },
        "selected": false,
        "type": "genericNode"
      },
      {
        "data": {
          "id": "TextOutput-nLucA",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "category": "input_output",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Sends text output via API.",
            "display_name": "Text Output",
            "documentation": "https://docs.langflow.org/components-io#text-output",
            "edited": false,
            "field_order": [
              "input_value"
            ],
            "frozen": false,
            "icon": "type",
            "key": "TextOutput",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Output Text",
                "group_outputs": false,
                "method": "text_response",
                "name": "text",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.002151957098264304,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextOutputComponent(TextComponent):\n    display_name = \"Text Output\"\n    description = \"Sends text output via API.\"\n    documentation: str = \"https://docs.langflow.org/components-io#text-output\"\n    icon = \"type\"\n    name = \"TextOutput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Inputs\",\n            info=\"Text to be passed as output.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Output Text\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        message = Message(\n            text=self.input_value,\n        )\n        self.status = self.input_value\n        return message\n"
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "copy_field": false,
                "display_name": "Inputs",
                "dynamic": false,
                "info": "Text to be passed as output.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "showNode": true,
          "type": "TextOutput"
        },
        "dragging": false,
        "id": "TextOutput-nLucA",
        "measured": {
          "height": 203,
          "width": 320
        },
        "position": {
          "x": 1067.8870883279824,
          "y": 1945.7513593634212
        },
        "selected": false,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 679.8547130564588,
      "y": -357.76563838674076,
      "zoom": 0.453691768159611
    }
  },
  "description": "Transform Your Business with Smart Dialogues.",
  "endpoint_name": null,
  "id": "128d0325-0fa5-4366-974d-fff34a00f144",
  "is_component": false,
  "last_tested_version": "1.5.0.post1",
  "name": "inst_ia_plano_diretor_callable",
  "tags": []
}